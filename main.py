import sys
import subprocess


# PyQt6 yÃ¼klÃ¼ mÃ¼ kontrol et, deÄŸilse otomatik yÃ¼kle
try:
    from PyQt6.QtWidgets import (
        QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout,
        QTableWidget, QTableWidgetItem, QMessageBox, QScrollArea, QHBoxLayout
    )
except ImportError:
    print("PyQt6 kÃ¼tÃ¼phanesi eksik. Otomatik olarak yÃ¼kleniyor...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "PyQt6"])
    from PyQt6.QtWidgets import (
        QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout,
        QTableWidget, QTableWidgetItem, QMessageBox, QScrollArea, QHBoxLayout
    )


# KaÄŸÄ±t tÃ¼rlerine gÃ¶re kalÄ±nlÄ±k deÄŸerleri (mm/yaprak)
kagit_kalinliklari = {
    "70 gr 1. hamur": 0.7, "80 gr 1. hamur": 0.8, "90 gr 1. hamur": 0.9,
    "110 gr 1. hamur": 1.1, "60 gr Enzo": 0.9, "70 gr Enzo": 1.1,
    "60 gr Ivory": 0.75, "70 gr Ivory": 0.95, "80 gr Ivory": 1.05,
    "80 gr mat kuÅŸe": 0.9, "90 gr mat kuÅŸe": 1.0, "115 gr mat kuÅŸe": 1.2,
    "130 gr mat kuÅŸe": 1.4, "170 gr mat kuÅŸe": 1.8, "200 gr mat kuÅŸe": 2.2,
    "80 gr parlak kuÅŸe": 0.9, "90 gr parlak kuÅŸe": 1.0, "115 gr parlak kuÅŸe": 1.2,
    "130 gr parlak kuÅŸe": 1.4, "170 gr parlak kuÅŸe": 1.8, "200 gr parlak kuÅŸe": 2.2
}


class KitapSirtKalÄ±nlÄ±kHesaplayici(QWidget):
    def __init__(self):
        super().__init__()


        self.setWindowTitle("Kitap SÄ±rt KalÄ±nlÄ±ÄŸÄ± HesaplayÄ±cÄ±")
        self.setGeometry(200, 200, 600, 600)


        # BaÅŸlÄ±k etiketi
        self.title_label = QLabel("ğŸ“– Kitap SÄ±rt KalÄ±nlÄ±ÄŸÄ± HesaplayÄ±cÄ±", self)
        self.title_label.setStyleSheet("font-size: 18px; font-weight: bold;")


        # Sayfa sayÄ±sÄ± etiketi ve giriÅŸ kutusu
        self.sayfa_label = QLabel("Sayfa SayÄ±sÄ±:", self)
        self.entry = QLineEdit(self)
        self.entry.setPlaceholderText("Ã–rn: 120")


        # Hesapla ve Temizle butonlarÄ±nÄ± iÃ§eren yatay layout
        self.button_hbox = QHBoxLayout()
        
        # Hesapla butonu
        self.button_hesapla = QPushButton("Hesapla", self)
        self.button_hesapla.clicked.connect(self.hesapla)
        self.button_hbox.addWidget(self.button_hesapla)
        
        # Temizle butonu
        self.button_temizle = QPushButton("Temizle", self)
        self.button_temizle.clicked.connect(self.temizle)
        self.button_hbox.addWidget(self.button_temizle)


        # SonuÃ§ tablosu
        self.table = QTableWidget(self)
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(["KaÄŸÄ±t TÃ¼rÃ¼", "KalÄ±nlÄ±k (mm)"])
        self.table.setColumnWidth(0, 300)
        self.table.setColumnWidth(1, 150)


        # ScrollArea ekleyerek tabloyu kaydÄ±rÄ±labilir hale getir
        self.scroll_area = QScrollArea(self)
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setWidget(self.table)


        # ArayÃ¼z DÃ¼zeni
        layout = QVBoxLayout()
        layout.addWidget(self.title_label)
        layout.addWidget(self.sayfa_label)
        layout.addWidget(self.entry)
        layout.addLayout(self.button_hbox)
        layout.addWidget(self.scroll_area)


        self.setLayout(layout)


    def veri_dogrula(self, sayfa_sayisi):
        """ Girilen sayfa sayÄ±sÄ±nÄ±n geÃ§erli olup olmadÄ±ÄŸÄ±nÄ± kontrol eder. """
        if not sayfa_sayisi.isdigit():
            return "GeÃ§ersiz giriÅŸ! Sayfa sayÄ±sÄ± sadece rakam olmalÄ±dÄ±r."
        sayfa_sayisi = int(sayfa_sayisi)
        if sayfa_sayisi <= 0:
            return "Sayfa sayÄ±sÄ± 0 veya negatif olamaz!"
        return None  # GeÃ§erli giriÅŸ


    def hesapla(self):
        """ Sayfa sayÄ±sÄ±na gÃ¶re kitap sÄ±rt kalÄ±nlÄ±ÄŸÄ±nÄ± hesaplar ve tabloya ekler """
        sayfa_sayisi = self.entry.text().strip()


        # Veri doÄŸrulama
        hata_mesaji = self.veri_dogrula(sayfa_sayisi)
        if hata_mesaji:
            self.hata_goster(hata_mesaji)
            return


        sayfa_sayisi = int(sayfa_sayisi)
        yaprak_sayisi = sayfa_sayisi / 2  # 2 sayfa = 1 yaprak olarak kabul edilir.


        self.table.setRowCount(len(kagit_kalinliklari))  # SatÄ±r sayÄ±sÄ±nÄ± belirle


        for i, (kagit, kalinlik) in enumerate(kagit_kalinliklari.items()):
            sonuc = yaprak_sayisi * kalinlik
            self.table.setItem(i, 0, QTableWidgetItem(kagit))
            self.table.setItem(i, 1, QTableWidgetItem(f"{sonuc:.2f} MM"))


    def temizle(self):
        """ Tabloyu ve giriÅŸ kutusunu temizler """
        self.entry.clear()
        self.table.setRowCount(0)


    def hata_goster(self, mesaj):
        """ KullanÄ±cÄ±ya hata mesajÄ±nÄ± gÃ¶sterir. """
        msg = QMessageBox(self)
        msg.setIcon(QMessageBox.Icon.Warning)
        msg.setWindowTitle("Hata")
        msg.setText(mesaj)
        msg.exec()


# UygulamayÄ± baÅŸlat
if __name__ == "__main__":
    app = QApplication(sys.argv)
    pencere = KitapSirtKalÄ±nlÄ±kHesaplayici()
    pencere.show()
    sys.exit(app.exec())
